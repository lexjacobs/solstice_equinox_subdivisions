{"version":3,"sources":["util/makeDivisions.js","AverageGap.js","HeaderSelectors.js","Segments.js","App.js","serviceWorker.js","index.js"],"names":["moment","require","utcDates","seasonMap","0","1","2","3","calculateDivision64","n","result","data","seasonsArray","i","length","season1","season2","start","utc","timestamp","valueOf","chunk","push","division","year","season","divideData","allDates","end","j","Object","keys","spreadSeasonalObjectsIntoArray","AverageGap","props","period","segment","aveDiff","totalDiff","curr","computeAverageDifference","duration","asDays","asHours","className","Math","round","HeaderSelectors","startYearOptions","key","value","endYearOptions","startYear","htmlFor","onChange","e","onSelectChange","target","id","tz","guess","format","endYear","Segments","renderData","map","x","slice","toUpperCase","toLowerCase","zone","NOW","Date","App","state","getFullYear","console","log","this","val","setState","dataSegment","filter","includes","handleOptionChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8133487.chunk.js","sourcesContent":["// const _ = require('lodash');\nconst moment = require('moment-timezone');\n\nconst START = 1970;\nconst END = 2070;\n\n/* json object keyed by year with\nkeys of spring/summer/autumn/winter  \nand values like \"1970-03-21 00:56:18:602\"\n */\nconst utcDates = require('../data/solstice_equinox_1970_2070_UTC.json');\n\n// map seasons to integer\nvar seasonMap = {\n  0: 'spring',\n  1: 'summer',\n  2: 'autumn',\n  3: 'winter'\n};\n\nfunction spreadSeasonalObjectsIntoArray(allDates, start, end) {\n  // create result array\n  var result = [];\n  // from start (1970) -> end (2070)\n  for (var i = start; i <= end; i++) {\n    // add every seasonal time, tagged appropriately\n    for (var j = 0; j < Object.keys(seasonMap).length; j++) {\n      let season = allDates[i][seasonMap[j]];\n      result.push({\n        timestamp: season,\n        year: i,\n        season: seasonMap[j]\n      });\n    }\n  }\n  return result;\n}\n\nfunction calculateDivision64(n) {\n  var result = {\n    '64': true\n  };\n  if (n % 32 === 0) {\n    result['2'] = true;\n  }\n  if (n % 16 === 0) {\n    result['4'] = true;\n  }\n  if (n % 8 === 0) {\n    result['8'] = true;\n  }\n  if (n % 4 === 0) {\n    result['16'] = true;\n  }\n  if (n % 2 === 0) {\n    result['32'] = true;\n  }\n  if (n === 0) {\n    result['1'] = true;\n  }\n\n  return result;\n}\n\n/* \n\tdividedData ends up looking like this\n\t{ \"division\": { \"2\": true, \"4\": true, \"8\": true, \"16\": true, \"32\": true, \"64\": true, \"exactSeason\": true }, \"year\": 1970, \"season\": \"spring\", \"timestamp\": \"Mar 20 1970 16:56:18:602 -08:00\" }\n\t{ \"division\": { \"64\": true }, \"year\": 1970, \"season\": \"spring\", \"timestamp\": \"Mar 22 1970 03:43:54:532 -08:00\" }\n\t{ \"division\": { \"32\": true, \"64\": true }, \"year\": 1970, \"season\": \"spring\", \"timestamp\": \"Mar 23 1970 14:31:30:462 -08:00\" }\n\t{ \"division\": { \"64\": true }, \"year\": 1970, \"season\": \"spring\", \"timestamp\": \"Mar 25 1970 01:19:06:392 -08:00\" }\n\t{ \"division\": { \"16\": true, \"32\": true, \"64\": true }, \"year\": 1970, \"season\": \"spring\", \"timestamp\": \"Mar 26 1970 12:06:42:322 -08:00\" }\n\t{ \"division\": { \"64\": true }, \"year\": 1970, \"season\": \"spring\", \"timestamp\": \"Mar 27 1970 22:54:18:252 -08:00\" }\n\t{ \"division\": { \"32\": true, \"64\": true }, \"year\": 1970, \"season\": \"spring\", \"timestamp\": \"Mar 29 1970 09:41:54:182 -08:00\" }\n*/\n\nfunction divideData(seasonsArray) {\n  var result = [];\n  for (var i = 0; i < seasonsArray.length - 1; i++) {\n    // grab seasonal pair objects (i <--> i+1)\n    var season1 = seasonsArray[i];\n    var season2 = seasonsArray[i + 1];\n\n    // define seasonal pair ms start / end\n    // TODO: make a moment.tz object for later parsing into different time zones\n    var start = moment.utc(season1.timestamp).valueOf();\n    var end = moment.utc(season2.timestamp).valueOf();\n\n    // define 64th of distance between start and end\n    var chunk = (end - start) / 64;\n\n    // push 64ths between pairs into buckets, inclusive of start / exclusive of end\n    for (let i = 0; i < 64; i++) {\n      result.push({\n        division: calculateDivision64(i),\n        year: season1.year,\n        season: season1.season,\n        timestamp: start + i * chunk\n      });\n    }\n  }\n  return result;\n}\n\n// console.timeEnd();\nconst spreadData = spreadSeasonalObjectsIntoArray(utcDates, START, END);\nconst dividedData = divideData(spreadData);\nexport const data = dividedData;\n","import React from 'react';\nimport moment from 'moment-timezone';\nimport './AverageGap.css';\n\nexport function computeAverageDifference(data) {\n  let totalDiff = 0;\n  for (let i = 0; i < data.length - 1; i++) {\n    let curr = data[i].timestamp;\n    let next = data[i + 1].timestamp;\n    totalDiff += next - curr;\n  }\n  return totalDiff / (data.length - 1);\n}\n\nexport const AverageGap = (props) => {\n  let aveDiff = computeAverageDifference(props.data);\n  let period, segment;\n  // except for 64ths\n  if (+props.division <= 32) {\n    period = moment.duration(aveDiff).asDays();\n    segment = 'day';\n  } else {\n    period = moment.duration(aveDiff).asHours();\n    segment = 'hour';\n  }\n\n  return (\n    <div className=\"average-difference\">\n      Average difference between periods: {Math.round(period * 1000) / 1000} {segment}s\n    </div>\n  );\n};\n","import React from 'react';\nimport moment from 'moment-timezone';\nimport './HeaderSelectors.css';\n\nconst START_YEAR = 1970;\nconst END_YEAR = 2070;\n\nexport const HeaderSelectors = (props) => {\n  var startYearOptions = [];\n  for (let i = START_YEAR; i <= END_YEAR; i++) {\n    startYearOptions.push(\n      <option key={i} value={i}>\n        {i}\n      </option>\n    );\n  }\n  var endYearOptions = [];\n  for (let i = props.startYear; i <= END_YEAR; i++) {\n    endYearOptions.push(\n      <option key={i} value={i}>\n        {i}\n      </option>\n    );\n  }\n\n  return (\n    <nav>\n      <label htmlFor=\"season-division\">Subdivide: </label>\n      <select\n        onChange={(e) => {\n          props.onSelectChange('division', e.target.value);\n        }}\n        id=\"season-division\"\n      >\n        <option value=\"1\">Exact</option>\n        <option value=\"2\">Halves</option>\n        <option value=\"4\">Quarters</option>\n        <option value=\"8\">Eighths</option>\n        <option value=\"16\">16ths</option>\n        <option value=\"32\">32nds</option>\n        <option value=\"64\">64ths</option>\n      </select>\n\n      <label htmlFor=\"timezone\">Timezone: </label>\n      <select\n        onChange={(e) => {\n          props.onSelectChange('zone', e.target.value);\n        }}\n        id=\"timezone\"\n      >\n        <option value={moment.tz.guess()}>Current Detected ({moment.tz(moment.tz.guess()).format('z')})</option>\n        <option value=\"US/Pacific\">Pacific Time</option>\n        <option value=\"US/Mountain\">Mountain Time</option>\n        <option value=\"US/Central\">Central Time</option>\n        <option value=\"US/Eastern\">Eastern Time</option>\n        <option value=\"GMT\">GMT</option>\n      </select>\n\n      <br />\n\n      <label htmlFor=\"start-year\">Start: </label>\n      <select\n        value={props.startYear}\n        id=\"start-year\"\n        onChange={(e) => {\n          props.onSelectChange('startYear', +e.target.value);\n          props.onSelectChange('endYear', props.endYear < +e.target.value ? +e.target.value : props.endYear);\n        }}\n      >\n        {startYearOptions}\n      </select>\n      <label htmlFor=\"end-year\">End: </label>\n      <select\n        onChange={(e) => {\n          props.onSelectChange('endYear', +e.target.value);\n        }}\n        value={props.endYear}\n        id=\"end-year\"\n      >\n        {endYearOptions}\n      </select>\n    </nav>\n  );\n};\n","import React from 'react';\nimport moment from 'moment-timezone';\nimport './Segments.css';\n\nconst FORMAT_DAY = 'ddd, MMM DD, YYYY';\nconst FORMAT_TIME = 'HH:mm:ss.SSS (zz) Z';\n\nexport const Segments = (props) => {\n  let renderData = props.data.map((x, i) => {\n    // exact season\n\n    return (\n      <div key={i}>\n        {i % props.division === 0 ? (\n          <span className=\"exact-season\">{`${x.season.slice(0, 1).toUpperCase()}${x.season\n            .slice(1)\n            .toLowerCase()}, ${x.year}`}</span>\n        ) : (\n          <span className=\"fraction-season\">\n            {`${x.season.slice(0, 1).toUpperCase()}${x.season.slice(1).toLowerCase()}, ${x.year} ${'+ ' +\n              i % props.division}${'/' + props.division}`}\n          </span>\n        )}\n        <pre>{moment.tz(x.timestamp, props.zone).format(FORMAT_DAY)}</pre>\n        <pre>{moment.tz(x.timestamp, props.zone).format(FORMAT_TIME)}</pre>\n        <br />\n      </div>\n    );\n  });\n\n  return <main>{renderData}</main>;\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { data } from './util/makeDivisions.js';\nimport { AverageGap } from './AverageGap';\nimport { HeaderSelectors } from './HeaderSelectors';\nimport { Segments } from './Segments';\nconst moment = require('moment-timezone');\n\nconst NOW = new Date();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data,\n      zone: moment.tz.guess(),\n      division: '1',\n      startYear: NOW.getFullYear(),\n      endYear: NOW.getFullYear()\n    };\n  }\n\n  componentDidMount() {\n    console.log(`guessing local time zone ${this.state.zone}`);\n  }\n\n  handleOptionChange(key, val) {\n    this.setState({ [key]: val });\n  }\n\n  render() {\n    let dataSegment = this.state.data.filter(\n      (x) =>\n        x.year >= this.state.startYear &&\n        x.year <= this.state.endYear &&\n        Object.keys(x.division).includes(this.state.division)\n    );\n\n    // { \"division\": { \"2\": true, \"4\": true, \"8\": true, \"16\": true, \"32\": true, \"64\": true, \"exactSeason\": true ...\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Solstice Equinox Subdivisions</h1>\n          <HeaderSelectors\n            startYear={this.state.startYear}\n            endYear={this.state.endYear}\n            onSelectChange={(key, val) => this.handleOptionChange(key, val)}\n          />\n        </header>\n        <AverageGap data={dataSegment} division={this.state.division} />\n        <Segments data={dataSegment} division={this.state.division} zone={this.state.zone} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}